"use strict";(self.webpackChunkglitch_runner=self.webpackChunkglitch_runner||[]).push([[1173],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"dsa/pointers","title":"Pointers in C++","description":"Understand pointers with simple C++ examples and use-cases.","source":"@site/docs/dsa/1 pointers.md","sourceDirName":"dsa","slug":"/dsa/pointers","permalink":"/glitch-runner/docs/dsa/pointers","draft":false,"unlisted":false,"editUrl":"https://github.com/cosmoglitch/glitch-runner/docs/dsa/1 pointers.md","tags":[],"version":"current","frontMatter":{"id":"pointers","title":"Pointers in C++","sidebar_label":"1. Pointers","description":"Understand pointers with simple C++ examples and use-cases.","slug":"/dsa/pointers"},"sidebar":"tutorialSidebar","previous":{"title":"0. IDE Setup","permalink":"/glitch-runner/docs/dsa/vscode-setup"},"next":{"title":"Tutorial Intro","permalink":"/glitch-runner/docs/intro"}}');var r=t(4848),i=t(8453);const o={id:"pointers",title:"Pointers in C++",sidebar_label:"1. Pointers",description:"Understand pointers with simple C++ examples and use-cases.",slug:"/dsa/pointers"},a=void 0,l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Pointer Arithmetic",id:"pointer-arithmetic",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u201cA pointer is a variable that stores the address of another variable.\u201d"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83e\udde0 ",(0,r.jsx)(n.strong,{children:"Why Learn Pointers?"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Core to memory management"}),"\n",(0,r.jsx)(n.li,{children:"Essential for arrays, linked lists, trees"}),"\n",(0,r.jsx)(n.li,{children:"Enables efficient parameter passing"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcdd",(0,r.jsx)(n.strong,{children:"Operators : & (Address of),*(Value Of)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"&" Operator : Gives address of the variable'}),"\n",(0,r.jsx)(n.li,{children:'"*" Operator : Gives value of the variable'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'int x = 5;\nint* p = &x;\ncout << "Value of x = " << x << endl;\ncout << "Value of p = " << *p << endl;\ncout << "Address of x = " << p << endl;\ncout << "Address of x = " << &x << endl;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udca1",(0,r.jsx)(n.strong,{children:"Good Practice"}),"\nAlways assign pointer variables an address value or make it a null pointer."]}),"\n",(0,r.jsx)(n.p,{children:"Say :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int* p;  // This will hold a garbage address value\n(*p)++;\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'Pointer variable "p" will hold a garbage address value and increment it. This might break the system.'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Thus as a correct practice either assign an address to it on declaration, or make it a null pointer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int *p = &x;\nint *q = 0;  // Null Pointer. (*p)++ will give Segmentation Fault here.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pointer-arithmetic",children:"Pointer Arithmetic"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);